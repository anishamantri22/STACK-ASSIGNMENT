// REORDER LIST
class Solution {
public ListNode midNode(ListNode head){
if(head == null || head.next == null){
return head;
}
ListNode slow = head;
ListNode fast = head;
while(fast.next != null && fast.next.next != null){
slow = slow.next;
fast = fast.next.next;
}
return slow;
}

public ListNode reverseLL(ListNode head){
if(head == null || head.next == null) return head;
ListNode curr= head;
ListNode prev = null;
ListNode forw = null;
while(curr != null){
forw = curr.next;
curr.next = prev;
prev = curr;
curr = forw;
}
return prev;
}
public void reorderList(ListNode head) {
if(head == null || head.next == null)return;
ListNode mid = midNode(head);
ListNode nHead = mid.next;
mid.next = null;
nHead = reverseLL(nHead);
ListNode c1 = head;
ListNode c2 = nHead;
ListNode f1 = null;
ListNode f2 = null;
while(c2 != null){
f1 = c1.next;
f2 = c2.next;
c1.next = c2;
c2.next = f1;
c1 =f1;
c2 = f2;
}
}
}

//RESVERSE A STRING USING STACK
char* reverse(char *S, int len)
{
    //code here
    stack<char>st;
    for(int i=0;i<len;i++)
    {
        st.push(S[i]);
    }
    int j=0;
    while(!st.empty())
    {
        S[j]=st.top();
        j++;
        st.pop();
    }
    return S;
}

//VALID PARENTHESES
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        
        mapping = {
            '(':')',
            '[':']',
            '{':'}'            
        }
        
        for char in s:
            if char in mapping.keys():
                stack.append(mapping[char])
            elif not stack or stack[-1]!=char:
                return False
            else:
                stack.pop()
        
        return len(stack)==0
        
// SCORE OF PARANTHESES
class Solution {
    public int scoreOfParentheses(String s) {
        Stack<Integer> st = new Stack<>();
        int score = 0;
        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            if(ch == '('){
                st.push(score);
                score = 0;
            }
            else {
                score = st.pop() + Math.max(2 * score, 1);
            }
        }
        return score;
    }
}

// NEXT GREATER ELEMENT
vector<long long>v;
       stack<long long>s;
       for(int i=n-1;i>=0;i--)
       {
           if(s.size()==0)
           {
               v.push_back(-1);
           }
           else if(s.size()>0 && s.top()>arr[i])
           {
               v.push_back(s.top());
           }
           else if(s.size()>0 && s.top()<=arr[i])
           {
               while(s.size()>0 && s.top()<=arr[i])
               {
                   s.pop();
               }
               if(s.size()==0)
               {
                   v.push_back(-1);
               }
               else{
                   v.push_back(s.top());
               }
           }
           s.push(arr[i]);
       }
       reverse(v.begin(),v.end());
       return v
       
//NEXT GREATER ELEMENT - ||
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        Stack<Integer> s = new Stack<Integer>();
        int[] answer = new int[nums.length];
        int i=1;
        s.push(0);
        
        while(i<nums.length) 
        {
            if(!s.isEmpty())
            {
                if(nums[s.peek()]>=nums[i])
                {
                    s.push(i);
                }else
                {
                    answer[s.pop()]=nums[i];
                    continue;
                }
            }else
            {
                s.push(i);
            }
            
            i++;
        }
        
        i=0;
        
        while(!s.isEmpty() && i<nums.length)
        {
            
            if(nums[i]>nums[s.peek()])
            {
                answer[s.pop()]=nums[i];
                
            }
            else
            {
                i++;
            }
        }
       
        while(!s.isEmpty())
            answer[s.pop()]=-1;
        
        return answer;
    }
}
// REMOVE DUPLICATE LETTERS
class Solution {
public:
    string removeDuplicateLetters(string s) {
         vector<int> lastIndex(26, 0);
        for (int i = 0; i < s.length(); i++){
            lastIndex[s[i] - 'a'] = i; // track the lastIndex of character presence
        }
        
        vector<bool> seen(26, false); // keep track seen
        stack<char> st;
        
        for (int i = 0; i < s.size(); i++) {
            int curr = s[i] - 'a';
            if (seen[curr]) continue; // if seen continue as we need to pick one char only
            while(st.size() > 0 && st.top() > s[i] && i < lastIndex[st.top() - 'a']){
                seen[st.top() - 'a'] = false; // pop out and mark unseen
                st.pop();
            }
            st.push(s[i]); // add into stack
            seen[curr] = true; // mark seen
        }
        
        string ans = "";
        while (st.size() > 0){
            ans += st.top();
            st.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};

// MAXIMUM RECTANGULAR AREA IN A HISTOGRAM
vector<long long >left;

        vector<long long >right;

        stack<long long>s;

        for (int i=0;i<n;i++)

        {

            if (s.empty())

            {

                left.push_back(-1);

                s.push(i);

            }

            else

            {

                while (!s.empty()&& arr[s.top()]>=arr[i])

                {

                   s.pop();

                }

                if(s.empty())

                {

                    left.push_back(-1);

                    s.push(i);

                }

                else

                {

                    left.push_back(s.top());

                    s.push(i);

                }

               

            }

        }

        //  for (int i=0;i<left.size();i++)

        // {

        //     cout<<left[i]<<" ";

        // }

        // cout<<endl;

        stack<long long>s1;

        for (int i=n-1;i>=0;i--)

        {

            if (s1.empty())

            {

                right.push_back(-1);

                s1.push(i);

            }

            else

            {

                while (!s1.empty()&& arr[s1.top()]>=arr[i])

                {

                   s1.pop();

                }

                if(s1.empty())

                {

                    right.push_back(-1);

                    s1.push(i);

                }

                else

                {

                    right.push_back(s1.top());

                    s1.push(i);

                }

               

            }

        }

        reverse(right.begin(),right.end());

       

        //  for (int i=0;i<right.size();i++)

        // {

        //     cout<<right[i]<<" ";

        // }

        long long sum=0;

       for(int i=0;i<n;i++)

       {

           if (left[i]!=-1&&right[i]!=-1)

           {

               sum=max(sum,arr[i]+(right[i]-i-1)*arr[i]+(i-left[i]-1)*arr[i]);

           }

           else

           {

               if(left[i]==-1&&right[i]==-1)

               {

                   sum=max(sum,((n-1)-i)*arr[i]+i*arr[i]+arr[i]);

               }

               else

               {

                   if(left[i]==-1)

                   {

                       sum=max(sum,arr[i]*i+arr[i]+(right[i]-i-1)*arr[i]);

                   }

                   else

                   {

                       sum=max(sum,((n-1)-i)*arr[i]+arr[i]+(i-left[i]-1)*arr[i]);

                   }

               }

           }

       }

 

        return sum;
        
        
// TRAPPING RAIN WATER
class Solution:
    def trap(self, height: List[int]) -> int:
        curr_max = 0
        max_left = [curr_max:= max(curr_max, h) for h in height]
        curr_max = 0
        max_right = [curr_max:= max(curr_max, h) for h in reversed(height)]
        max_right.reverse()
        return sum([min(max_left[i], max_right[i]) - height[i] for i in range(len(height))])
